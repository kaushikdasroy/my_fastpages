{
  
    
  
    
  
    
  
    
        "post3": {
            "title": "Simple RNN",
            "content": "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python # For example, here&#39;s several helpful packages to load import numpy as np # linear algebra import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv) # Input data files are available in the read-only &quot;../input/&quot; directory # For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory import os for dirname, _, filenames in os.walk(&#39;/kaggle/input&#39;): for filename in filenames: print(os.path.join(dirname, filename)) # You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using &quot;Save &amp; Run All&quot; # You can also write temporary files to /kaggle/temp/, but they won&#39;t be saved outside of the current session . Import resources and create data . import torch from torch import nn import numpy as np import matplotlib.pyplot as plt %matplotlib inline . plt.figure(figsize=(8,5)) # how many time steps/data pts are in one batch of data seq_length = 20 # generate evenly spaced data pts time_steps = np.linspace(0, np.pi, seq_length + 1) data = np.sin(time_steps) data.resize((seq_length + 1, 1)) # size becomes (seq_length+1, 1), adds an input_size dimension x = data[:-1] # all but the last piece of data y = data[1:] # all but the first # display the data plt.plot(time_steps[1:], x, &#39;r.&#39;, label=&#39;input, x&#39;) # x plt.plot(time_steps[1:], y, &#39;b.&#39;, label=&#39;target, y&#39;) # y plt.legend(loc=&#39;best&#39;) plt.show() . time_steps . array([0. , 0.15707963, 0.31415927, 0.4712389 , 0.62831853, 0.78539816, 0.9424778 , 1.09955743, 1.25663706, 1.41371669, 1.57079633, 1.72787596, 1.88495559, 2.04203522, 2.19911486, 2.35619449, 2.51327412, 2.67035376, 2.82743339, 2.98451302, 3.14159265]) . time_steps.shape . (20,) . np.set_printoptions(suppress=True) data . array([[0. ], [0.15643447], [0.30901699], [0.4539905 ], [0.58778525], [0.70710678], [0.80901699], [0.89100652], [0.95105652], [0.98768834], [1. ], [0.98768834], [0.95105652], [0.89100652], [0.80901699], [0.70710678], [0.58778525], [0.4539905 ], [0.30901699], [0.15643447], [0. ]]) . data.shape . (21, 1) . np.sin(np.pi/2) . 1.0 . data[1:] . array([[0.15643447], [0.30901699], [0.4539905 ], [0.58778525], [0.70710678], [0.80901699], [0.89100652], [0.95105652], [0.98768834], [1. ], [0.98768834], [0.95105652], [0.89100652], [0.80901699], [0.70710678], [0.58778525], [0.4539905 ], [0.30901699], [0.15643447], [0. ]]) . np.set_printoptions(suppress=True) torch.Tensor(data).unsqueeze(1) . tensor([[[0.0000e+00]], [[1.5643e-01]], [[3.0902e-01]], [[4.5399e-01]], [[5.8779e-01]], [[7.0711e-01]], [[8.0902e-01]], [[8.9101e-01]], [[9.5106e-01]], [[9.8769e-01]], [[1.0000e+00]], [[9.8769e-01]], [[9.5106e-01]], [[8.9101e-01]], [[8.0902e-01]], [[7.0711e-01]], [[5.8779e-01]], [[4.5399e-01]], [[3.0902e-01]], [[1.5643e-01]], [[1.2246e-16]]]) . torch.Tensor(data).unsqueeze(0) . tensor([[[0.0000e+00], [1.5643e-01], [3.0902e-01], [4.5399e-01], [5.8779e-01], [7.0711e-01], [8.0902e-01], [8.9101e-01], [9.5106e-01], [9.8769e-01], [1.0000e+00], [9.8769e-01], [9.5106e-01], [8.9101e-01], [8.0902e-01], [7.0711e-01], [5.8779e-01], [4.5399e-01], [3.0902e-01], [1.5643e-01], [1.2246e-16]]]) . . Define the RNN . Next, we define an RNN in PyTorch. We&#39;ll use nn.RNN to create an RNN layer, then we&#39;ll add a last, fully-connected layer to get the output size that we want. An RNN takes in a number of parameters: . input_size - the size of the input | hidden_dim - the number of features in the RNN output and in the hidden state | n_layers - the number of layers that make up the RNN, typically 1-3; greater than 1 means that you&#39;ll create a stacked RNN | batch_first - whether or not the input/output of the RNN will have the batch_size as the first dimension (batch_size, seq_length, hidden_dim) | . Take a look at the RNN documentation to read more about recurrent layers. . torch.Tensor(data).unsqueeze(0).size() . class RNN(nn.Module): def __init__(self, input_size, output_size, hidden_dim, n_layers): super(RNN, self).__init__() self.hidden_dim=hidden_dim # define an RNN with specified parameters # batch_first means that the first dim of the input and output will be the batch_size self.rnn = nn.RNN(input_size, hidden_dim, n_layers, batch_first=True) # last, fully-connected layer self.fc = nn.Linear(hidden_dim, output_size) def forward(self, x, hidden): # x (batch_size, seq_length, input_size) # hidden (n_layers, batch_size, hidden_dim) # r_out (batch_size, time_step, hidden_size) batch_size = x.size(0) # get RNN outputs r_out, hidden = self.rnn(x, hidden) # shape output to be (batch_size*seq_length, hidden_dim) r_out = r_out.view(-1, self.hidden_dim) # get final output output = self.fc(r_out) return output, hidden . Check the input and output dimensions . As a check that your model is working as expected, test out how it responds to input data. . test_rnn = RNN(input_size=1, output_size=1, hidden_dim=10, n_layers=2) # generate evenly spaced, test data pts time_steps = np.linspace(0, np.pi, seq_length) data = np.sin(time_steps) data.resize((seq_length, 1)) test_input = torch.Tensor(data).unsqueeze(0) # give it a batch_size of 1 as first dimension print(&#39;Input size: &#39;, test_input.size()) # test out rnn sizes test_out, test_h = test_rnn(test_input, None) print(&#39;Output size: &#39;, test_out.size()) print(&#39;Hidden state size: &#39;, test_h.size()) . Input size: torch.Size([1, 20, 1]) Output size: torch.Size([20, 1]) Hidden state size: torch.Size([2, 1, 10]) . . Training the RNN . Next, we&#39;ll instantiate an RNN with some specified hyperparameters. Then train it over a series of steps, and see how it performs. . input_size=1 output_size=1 hidden_dim=32 n_layers=1 # instantiate an RNN rnn = RNN(input_size, output_size, hidden_dim, n_layers) print(rnn) . RNN( (rnn): RNN(1, 32, batch_first=True) (fc): Linear(in_features=32, out_features=1, bias=True) ) . Loss and Optimization . This is a regression problem: can we train an RNN to accurately predict the next data point, given a current data point? . The data points are coordinate values, so to compare a predicted and ground_truth point, we&#39;ll use a regression loss:the mean squared error.* It&#39;s typical to use an Adam optimizer for recurrent models. | . criterion = nn.MSELoss() optimizer = torch.optim.Adam(rnn.parameters(), lr=0.01) . Defining the training function . This function takes in an rnn, a number of steps to train for, and returns a trained rnn. This function is also responsible for displaying the loss and the predictions, every so often. . Hidden State . Pay close attention to the hidden state, here: . Before looping over a batch of training data, the hidden state is initialized | After a new hidden state is generated by the rnn, we get the latest hidden state, and use that as input to the rnn for the following steps | . def train(rnn, n_steps, print_every): # initialize the hidden state hidden = None for batch_i, step in enumerate(range(n_steps)): # defining the training data time_steps = np.linspace(step * np.pi, (step+1)*np.pi, seq_length + 1) data = np.sin(time_steps) data.resize((seq_length + 1, 1)) # input_size=1 x = data[:-1] y = data[1:] # convert data into Tensors x_tensor = torch.Tensor(x).unsqueeze(0) # unsqueeze gives a 1, batch_size dimension y_tensor = torch.Tensor(y) # outputs from the rnn prediction, hidden = rnn(x_tensor, hidden) ## Representing Memory ## # make a new variable for hidden and detach the hidden state from its history # this way, we don&#39;t backpropagate through the entire history hidden = hidden.data # calculate the loss loss = criterion(prediction, y_tensor) # zero gradients optimizer.zero_grad() # perform backprop and update weights loss.backward() optimizer.step() # display loss and predictions if batch_i%print_every == 0: print(&#39;Loss: &#39;, loss.item()) plt.plot(time_steps[1:], x, &#39;r.&#39;) # input plt.plot(time_steps[1:], prediction.data.numpy().flatten(), &#39;b.&#39;) # predictions plt.show() return rnn . n_steps = 75 print_every = 15 trained_rnn = train(rnn, n_steps, print_every) . Loss: 0.4074189066886902 . Loss: 0.02961491048336029 . Loss: 0.006993359420448542 . Loss: 0.0076007782481610775 . Loss: 0.0006659030914306641 . Time-Series Prediction . Time-series prediction can be applied to many tasks. Think about weather forecasting or predicting the ebb and flow of stock market prices. You can even try to generate predictions much further in the future than just one time step! .",
            "url": "https://blog.uplandr.com/2021/06/11/udacity-rnn-time-series.html",
            "relUrl": "/2021/06/11/udacity-rnn-time-series.html",
            "date": " • Jun 11, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Title",
            "content": "Simple Linear Regression . Estimated time needed: 15 minutes . Objectives . After completing this lab you will be able to: . Use scikit-learn to implement simple Linear Regression | Create a model, train,test and use the model | . Importing Needed packages . import matplotlib.pyplot as plt import pandas as pd import pylab as pl import numpy as np %matplotlib inline . Downloading Data . To download the data, we will use !wget to download it from IBM Object Storage. . !wget -O FuelConsumption.csv https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-ML0101EN-SkillsNetwork/labs/Module%202/data/FuelConsumptionCo2.csv . --2020-11-18 18:56:48-- https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-ML0101EN-SkillsNetwork/labs/Module%202/data/FuelConsumptionCo2.csv Resolving cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud (cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud)... 67.228.254.196 Connecting to cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud (cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud)|67.228.254.196|:443... connected. HTTP request sent, awaiting response... 200 OK Length: 72629 (71K) [text/csv] Saving to: ‘FuelConsumption.csv’ FuelConsumption.csv 100%[===================&gt;] 70.93K --.-KB/s in 0.04s 2020-11-18 18:56:49 (1.80 MB/s) - ‘FuelConsumption.csv’ saved [72629/72629] . Did you know? When it comes to Machine Learning, you will likely be working with large datasets. As a business, where can you host your data? IBM is offering a unique opportunity for businesses, with 10 Tb of IBM Cloud Object Storage: Sign up now for free . Understanding the Data . FuelConsumption.csv: . We have downloaded a fuel consumption dataset, FuelConsumption.csv, which contains model-specific fuel consumption ratings and estimated carbon dioxide emissions for new light-duty vehicles for retail sale in Canada. Dataset source . MODELYEAR e.g. 2014 | MAKE e.g. Acura | MODEL e.g. ILX | VEHICLE CLASS e.g. SUV | ENGINE SIZE e.g. 4.7 | CYLINDERS e.g 6 | TRANSMISSION e.g. A6 | FUEL CONSUMPTION in CITY(L/100 km) e.g. 9.9 | FUEL CONSUMPTION in HWY (L/100 km) e.g. 8.9 | FUEL CONSUMPTION COMB (L/100 km) e.g. 9.2 | CO2 EMISSIONS (g/km) e.g. 182 --&gt; low --&gt; 0 | . Reading the data in . df = pd.read_csv(&quot;FuelConsumption.csv&quot;) # take a look at the dataset df.head() . MODELYEAR MAKE MODEL VEHICLECLASS ENGINESIZE CYLINDERS TRANSMISSION FUELTYPE FUELCONSUMPTION_CITY FUELCONSUMPTION_HWY FUELCONSUMPTION_COMB FUELCONSUMPTION_COMB_MPG CO2EMISSIONS . 0 2014 | ACURA | ILX | COMPACT | 2.0 | 4 | AS5 | Z | 9.9 | 6.7 | 8.5 | 33 | 196 | . 1 2014 | ACURA | ILX | COMPACT | 2.4 | 4 | M6 | Z | 11.2 | 7.7 | 9.6 | 29 | 221 | . 2 2014 | ACURA | ILX HYBRID | COMPACT | 1.5 | 4 | AV7 | Z | 6.0 | 5.8 | 5.9 | 48 | 136 | . 3 2014 | ACURA | MDX 4WD | SUV - SMALL | 3.5 | 6 | AS6 | Z | 12.7 | 9.1 | 11.1 | 25 | 255 | . 4 2014 | ACURA | RDX AWD | SUV - SMALL | 3.5 | 6 | AS6 | Z | 12.1 | 8.7 | 10.6 | 27 | 244 | . Data Exploration . Lets first have a descriptive exploration on our data. . df.describe() . MODELYEAR ENGINESIZE CYLINDERS FUELCONSUMPTION_CITY FUELCONSUMPTION_HWY FUELCONSUMPTION_COMB FUELCONSUMPTION_COMB_MPG CO2EMISSIONS . count 1067.0 | 1067.000000 | 1067.000000 | 1067.000000 | 1067.000000 | 1067.000000 | 1067.000000 | 1067.000000 | . mean 2014.0 | 3.346298 | 5.794752 | 13.296532 | 9.474602 | 11.580881 | 26.441425 | 256.228679 | . std 0.0 | 1.415895 | 1.797447 | 4.101253 | 2.794510 | 3.485595 | 7.468702 | 63.372304 | . min 2014.0 | 1.000000 | 3.000000 | 4.600000 | 4.900000 | 4.700000 | 11.000000 | 108.000000 | . 25% 2014.0 | 2.000000 | 4.000000 | 10.250000 | 7.500000 | 9.000000 | 21.000000 | 207.000000 | . 50% 2014.0 | 3.400000 | 6.000000 | 12.600000 | 8.800000 | 10.900000 | 26.000000 | 251.000000 | . 75% 2014.0 | 4.300000 | 8.000000 | 15.550000 | 10.850000 | 13.350000 | 31.000000 | 294.000000 | . max 2014.0 | 8.400000 | 12.000000 | 30.200000 | 20.500000 | 25.800000 | 60.000000 | 488.000000 | . Lets select some features to explore more. . cdf = df[[&#39;ENGINESIZE&#39;,&#39;CYLINDERS&#39;,&#39;FUELCONSUMPTION_COMB&#39;,&#39;CO2EMISSIONS&#39;]] cdf.head(9) . ENGINESIZE CYLINDERS FUELCONSUMPTION_COMB CO2EMISSIONS . 0 2.0 | 4 | 8.5 | 196 | . 1 2.4 | 4 | 9.6 | 221 | . 2 1.5 | 4 | 5.9 | 136 | . 3 3.5 | 6 | 11.1 | 255 | . 4 3.5 | 6 | 10.6 | 244 | . 5 3.5 | 6 | 10.0 | 230 | . 6 3.5 | 6 | 10.1 | 232 | . 7 3.7 | 6 | 11.1 | 255 | . 8 3.7 | 6 | 11.6 | 267 | . we can plot each of these fearues: . viz = cdf[[&#39;CYLINDERS&#39;,&#39;ENGINESIZE&#39;,&#39;CO2EMISSIONS&#39;,&#39;FUELCONSUMPTION_COMB&#39;]] viz.hist() plt.show() . Now, lets plot each of these features vs the Emission, to see how linear is their relation: . plt.scatter(cdf.FUELCONSUMPTION_COMB, cdf.CO2EMISSIONS, color=&#39;blue&#39;) plt.xlabel(&quot;FUELCONSUMPTION_COMB&quot;) plt.ylabel(&quot;Emission&quot;) plt.show() . plt.scatter(cdf.ENGINESIZE, cdf.CO2EMISSIONS, color=&#39;blue&#39;) plt.xlabel(&quot;Engine size&quot;) plt.ylabel(&quot;Emission&quot;) plt.show() . Practice . plot CYLINDER vs the Emission, to see how linear is their relation: . . Double-click here for the solution. . Creating train and test dataset . Train/Test Split involves splitting the dataset into training and testing sets respectively, which are mutually exclusive. After which, you train with the training set and test with the testing set. This will provide a more accurate evaluation on out-of-sample accuracy because the testing dataset is not part of the dataset that have been used to train the data. It is more realistic for real world problems. . This means that we know the outcome of each data point in this dataset, making it great to test with! And since this data has not been used to train the model, the model has no knowledge of the outcome of these data points. So, in essence, it is truly an out-of-sample testing. . Lets split our dataset into train and test sets, 80% of the entire data for training, and the 20% for testing. We create a mask to select random rows using np.random.rand() function: . msk = np.random.rand(len(df)) &lt; 0.8 train = cdf[msk] test = cdf[~msk] . Simple Regression Model . Linear Regression fits a linear model with coefficients B = (B1, ..., Bn) to minimize the &#39;residual sum of squares&#39; between the actual value y in the dataset, and the predicted value yhat using linear approximation. . Train data distribution . plt.scatter(train.ENGINESIZE, train.CO2EMISSIONS, color=&#39;blue&#39;) plt.xlabel(&quot;Engine size&quot;) plt.ylabel(&quot;Emission&quot;) plt.show() . Modeling . Using sklearn package to model data. . from sklearn import linear_model regr = linear_model.LinearRegression() train_x = np.asanyarray(train[[&#39;ENGINESIZE&#39;]]) train_y = np.asanyarray(train[[&#39;CO2EMISSIONS&#39;]]) regr.fit (train_x, train_y) # The coefficients print (&#39;Coefficients: &#39;, regr.coef_) print (&#39;Intercept: &#39;,regr.intercept_) . Coefficients: [[39.55189061]] Intercept: [123.67539398] . As mentioned before, Coefficient and Intercept in the simple linear regression, are the parameters of the fit line. Given that it is a simple linear regression, with only 2 parameters, and knowing that the parameters are the intercept and slope of the line, sklearn can estimate them directly from our data. Notice that all of the data must be available to traverse and calculate the parameters. . Plot outputs . we can plot the fit line over the data: . plt.scatter(train.ENGINESIZE, train.CO2EMISSIONS, color=&#39;blue&#39;) plt.plot(train_x, regr.coef_[0][0]*train_x + regr.intercept_[0], &#39;-r&#39;) plt.xlabel(&quot;Engine size&quot;) plt.ylabel(&quot;Emission&quot;) . Text(0, 0.5, &#39;Emission&#39;) . Evaluation . we compare the actual values and predicted values to calculate the accuracy of a regression model. Evaluation metrics provide a key role in the development of a model, as it provides insight to areas that require improvement. . There are different model evaluation metrics, lets use MSE here to calculate the accuracy of our model based on the test set: . - Mean absolute error: It is the mean of the absolute value of the errors. This is the easiest of the metrics to understand since it’s just average error. - Mean Squared Error (MSE): Mean Squared Error (MSE) is the mean of the squared error. It’s more popular than Mean absolute error because the focus is geared more towards large errors. This is due to the squared term exponentially increasing larger errors in comparison to smaller ones. - Root Mean Squared Error (RMSE). - R-squared is not error, but is a popular metric for accuracy of your model. It represents how close the data are to the fitted regression line. The higher the R-squared, the better the model fits your data. Best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). . from sklearn.metrics import r2_score test_x = np.asanyarray(test[[&#39;ENGINESIZE&#39;]]) test_y = np.asanyarray(test[[&#39;CO2EMISSIONS&#39;]]) test_y_ = regr.predict(test_x) print(&quot;Mean absolute error: %.2f&quot; % np.mean(np.absolute(test_y_ - test_y))) print(&quot;Residual sum of squares (MSE): %.2f&quot; % np.mean((test_y_ - test_y) ** 2)) print(&quot;R2-score: %.2f&quot; % r2_score(test_y , test_y_) ) . Mean absolute error: 24.68 Residual sum of squares (MSE): 1022.63 R2-score: 0.72 . Want to learn more? . IBM SPSS Modeler is a comprehensive analytics platform that has many machine learning algorithms. It has been designed to bring predictive intelligence to decisions made by individuals, by groups, by systems – by your enterprise as a whole. A free trial is available through this course, available here: SPSS Modeler . Also, you can use Watson Studio to run these notebooks faster with bigger datasets. Watson Studio is IBM&#39;s leading cloud solution for data scientists, built by data scientists. With Jupyter notebooks, RStudio, Apache Spark and popular libraries pre-packaged in the cloud, Watson Studio enables data scientists to collaborate on their projects without having to install anything. Join the fast-growing community of Watson Studio users today with a free account at Watson Studio . Thank you for completing this lab! . Author . Saeed Aghabozorgi . Other Contributors . Joseph Santarcangelo . Change Log . Date (YYYY-MM-DD) Version Changed By Change Description . 2020-11-03 | 2.1 | Lakshmi Holla | Changed URL of the csv | . 2020-08-27 | 2.0 | Lavanya | Moved lab to course repo in GitLab | . | | | | . | | | . © IBM Corporation 2020. All rights reserved. &lt;/h2&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; .",
            "url": "https://blog.uplandr.com/2021/06/11/ML0101EN-Reg-Simple-Linear-Regression-Co2-py-v1.html",
            "relUrl": "/2021/06/11/ML0101EN-Reg-Simple-Linear-Regression-Co2-py-v1.html",
            "date": " • Jun 11, 2021"
        }
        
    
  
    
  
    
  
    
  
    
        ,"post8": {
            "title": "Simple RNN",
            "content": "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python # For example, here&#39;s several helpful packages to load import numpy as np # linear algebra import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv) # Input data files are available in the read-only &quot;../input/&quot; directory # For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory import os for dirname, _, filenames in os.walk(&#39;/kaggle/input&#39;): for filename in filenames: print(os.path.join(dirname, filename)) # You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using &quot;Save &amp; Run All&quot; # You can also write temporary files to /kaggle/temp/, but they won&#39;t be saved outside of the current session . Import resources and create data . import torch from torch import nn import numpy as np import matplotlib.pyplot as plt %matplotlib inline . plt.figure(figsize=(8,5)) # how many time steps/data pts are in one batch of data seq_length = 20 # generate evenly spaced data pts time_steps = np.linspace(0, np.pi, seq_length + 1) data = np.sin(time_steps) data.resize((seq_length + 1, 1)) # size becomes (seq_length+1, 1), adds an input_size dimension x = data[:-1] # all but the last piece of data y = data[1:] # all but the first # display the data plt.plot(time_steps[1:], x, &#39;r.&#39;, label=&#39;input, x&#39;) # x plt.plot(time_steps[1:], y, &#39;b.&#39;, label=&#39;target, y&#39;) # y plt.legend(loc=&#39;best&#39;) plt.show() . time_steps . array([0. , 0.15707963, 0.31415927, 0.4712389 , 0.62831853, 0.78539816, 0.9424778 , 1.09955743, 1.25663706, 1.41371669, 1.57079633, 1.72787596, 1.88495559, 2.04203522, 2.19911486, 2.35619449, 2.51327412, 2.67035376, 2.82743339, 2.98451302, 3.14159265]) . time_steps.shape . (20,) . np.set_printoptions(suppress=True) data . array([[0. ], [0.15643447], [0.30901699], [0.4539905 ], [0.58778525], [0.70710678], [0.80901699], [0.89100652], [0.95105652], [0.98768834], [1. ], [0.98768834], [0.95105652], [0.89100652], [0.80901699], [0.70710678], [0.58778525], [0.4539905 ], [0.30901699], [0.15643447], [0. ]]) . data.shape . (21, 1) . np.sin(np.pi/2) . 1.0 . data[1:] . array([[0.15643447], [0.30901699], [0.4539905 ], [0.58778525], [0.70710678], [0.80901699], [0.89100652], [0.95105652], [0.98768834], [1. ], [0.98768834], [0.95105652], [0.89100652], [0.80901699], [0.70710678], [0.58778525], [0.4539905 ], [0.30901699], [0.15643447], [0. ]]) . np.set_printoptions(suppress=True) torch.Tensor(data).unsqueeze(1) . tensor([[[0.0000e+00]], [[1.5643e-01]], [[3.0902e-01]], [[4.5399e-01]], [[5.8779e-01]], [[7.0711e-01]], [[8.0902e-01]], [[8.9101e-01]], [[9.5106e-01]], [[9.8769e-01]], [[1.0000e+00]], [[9.8769e-01]], [[9.5106e-01]], [[8.9101e-01]], [[8.0902e-01]], [[7.0711e-01]], [[5.8779e-01]], [[4.5399e-01]], [[3.0902e-01]], [[1.5643e-01]], [[1.2246e-16]]]) . torch.Tensor(data).unsqueeze(0) . tensor([[[0.0000e+00], [1.5643e-01], [3.0902e-01], [4.5399e-01], [5.8779e-01], [7.0711e-01], [8.0902e-01], [8.9101e-01], [9.5106e-01], [9.8769e-01], [1.0000e+00], [9.8769e-01], [9.5106e-01], [8.9101e-01], [8.0902e-01], [7.0711e-01], [5.8779e-01], [4.5399e-01], [3.0902e-01], [1.5643e-01], [1.2246e-16]]]) . . Define the RNN . Next, we define an RNN in PyTorch. We&#39;ll use nn.RNN to create an RNN layer, then we&#39;ll add a last, fully-connected layer to get the output size that we want. An RNN takes in a number of parameters: . input_size - the size of the input | hidden_dim - the number of features in the RNN output and in the hidden state | n_layers - the number of layers that make up the RNN, typically 1-3; greater than 1 means that you&#39;ll create a stacked RNN | batch_first - whether or not the input/output of the RNN will have the batch_size as the first dimension (batch_size, seq_length, hidden_dim) | . Take a look at the RNN documentation to read more about recurrent layers. . torch.Tensor(data).unsqueeze(0).size() . class RNN(nn.Module): def __init__(self, input_size, output_size, hidden_dim, n_layers): super(RNN, self).__init__() self.hidden_dim=hidden_dim # define an RNN with specified parameters # batch_first means that the first dim of the input and output will be the batch_size self.rnn = nn.RNN(input_size, hidden_dim, n_layers, batch_first=True) # last, fully-connected layer self.fc = nn.Linear(hidden_dim, output_size) def forward(self, x, hidden): # x (batch_size, seq_length, input_size) # hidden (n_layers, batch_size, hidden_dim) # r_out (batch_size, time_step, hidden_size) batch_size = x.size(0) # get RNN outputs r_out, hidden = self.rnn(x, hidden) # shape output to be (batch_size*seq_length, hidden_dim) r_out = r_out.view(-1, self.hidden_dim) # get final output output = self.fc(r_out) return output, hidden . Check the input and output dimensions . As a check that your model is working as expected, test out how it responds to input data. . test_rnn = RNN(input_size=1, output_size=1, hidden_dim=10, n_layers=2) # generate evenly spaced, test data pts time_steps = np.linspace(0, np.pi, seq_length) data = np.sin(time_steps) data.resize((seq_length, 1)) test_input = torch.Tensor(data).unsqueeze(0) # give it a batch_size of 1 as first dimension print(&#39;Input size: &#39;, test_input.size()) # test out rnn sizes test_out, test_h = test_rnn(test_input, None) print(&#39;Output size: &#39;, test_out.size()) print(&#39;Hidden state size: &#39;, test_h.size()) . Input size: torch.Size([1, 20, 1]) Output size: torch.Size([20, 1]) Hidden state size: torch.Size([2, 1, 10]) . . Training the RNN . Next, we&#39;ll instantiate an RNN with some specified hyperparameters. Then train it over a series of steps, and see how it performs. . input_size=1 output_size=1 hidden_dim=32 n_layers=1 # instantiate an RNN rnn = RNN(input_size, output_size, hidden_dim, n_layers) print(rnn) . RNN( (rnn): RNN(1, 32, batch_first=True) (fc): Linear(in_features=32, out_features=1, bias=True) ) . Loss and Optimization . This is a regression problem: can we train an RNN to accurately predict the next data point, given a current data point? . The data points are coordinate values, so to compare a predicted and ground_truth point, we&#39;ll use a regression loss:the mean squared error.* It&#39;s typical to use an Adam optimizer for recurrent models. | . criterion = nn.MSELoss() optimizer = torch.optim.Adam(rnn.parameters(), lr=0.01) . Defining the training function . This function takes in an rnn, a number of steps to train for, and returns a trained rnn. This function is also responsible for displaying the loss and the predictions, every so often. . Hidden State . Pay close attention to the hidden state, here: . Before looping over a batch of training data, the hidden state is initialized | After a new hidden state is generated by the rnn, we get the latest hidden state, and use that as input to the rnn for the following steps | . def train(rnn, n_steps, print_every): # initialize the hidden state hidden = None for batch_i, step in enumerate(range(n_steps)): # defining the training data time_steps = np.linspace(step * np.pi, (step+1)*np.pi, seq_length + 1) data = np.sin(time_steps) data.resize((seq_length + 1, 1)) # input_size=1 x = data[:-1] y = data[1:] # convert data into Tensors x_tensor = torch.Tensor(x).unsqueeze(0) # unsqueeze gives a 1, batch_size dimension y_tensor = torch.Tensor(y) # outputs from the rnn prediction, hidden = rnn(x_tensor, hidden) ## Representing Memory ## # make a new variable for hidden and detach the hidden state from its history # this way, we don&#39;t backpropagate through the entire history hidden = hidden.data # calculate the loss loss = criterion(prediction, y_tensor) # zero gradients optimizer.zero_grad() # perform backprop and update weights loss.backward() optimizer.step() # display loss and predictions if batch_i%print_every == 0: print(&#39;Loss: &#39;, loss.item()) plt.plot(time_steps[1:], x, &#39;r.&#39;) # input plt.plot(time_steps[1:], prediction.data.numpy().flatten(), &#39;b.&#39;) # predictions plt.show() return rnn . n_steps = 75 print_every = 15 trained_rnn = train(rnn, n_steps, print_every) . Loss: 0.4074189066886902 . Loss: 0.02961491048336029 . Loss: 0.006993359420448542 . Loss: 0.0076007782481610775 . Loss: 0.0006659030914306641 . Time-Series Prediction . Time-series prediction can be applied to many tasks. Think about weather forecasting or predicting the ebb and flow of stock market prices. You can even try to generate predictions much further in the future than just one time step! .",
            "url": "https://blog.uplandr.com/2021/06/06/udacity-rnn-time-series-1.html",
            "relUrl": "/2021/06/06/udacity-rnn-time-series-1.html",
            "date": " • Jun 6, 2021"
        }
        
    
  
    
        ,"post9": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://blog.uplandr.com/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://blog.uplandr.com/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://blog.uplandr.com/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}